import { ArrayType, RecordType, bigintType, boolType, neverType, nullType, numberType, stringType, symbolType, voidType } from '@flect/core';
;
export class GuardMap {
    constructor() {
        this._map = new Map();
    }
    add(t, guard) {
        this._map.set(t, guard);
    }
    get(t) {
        const result = this._map.get(t);
        return result === undefined ? undefined : result;
    }
    _map;
}
;
export class GuardChain {
    constructor() {
        this._chain = [];
    }
    add(r) {
        this._chain.push(r);
    }
    get(t) {
        for (const rep of this._chain) {
            const result = rep.get(t);
            if (result !== undefined) {
                return result;
            }
        }
        return;
    }
    _chain;
}
;
export const defaultGuards = new GuardMap();
defaultGuards.add(stringType, (u) => typeof u === 'string');
defaultGuards.add(numberType, (u) => typeof u === 'number');
defaultGuards.add(bigintType, (u) => typeof u === 'bigint');
defaultGuards.add(boolType, (u) => typeof u === 'boolean');
defaultGuards.add(symbolType, (u) => typeof u === 'symbol');
defaultGuards.add(voidType, (u) => typeof u === 'undefined');
defaultGuards.add(nullType, (u) => u === null);
defaultGuards.add(neverType, (u) => false);
function objectHas(o, k) {
    return Object.hasOwn(o, k);
}
export class GenericRecordValidator {
    constructor(subRepo) {
        this._subRepo = subRepo;
    }
    get(t) {
        if (t instanceof RecordType) {
            const props = [];
            for (const p of t.properties) {
                const subVal = this._subRepo.get(p[1]);
                if (subVal === undefined) {
                    return; // Can't validate if we can't find sub-validators
                }
                props.push({ key: p[0], val: subVal });
            }
            return (u) => {
                if (typeof u !== 'object' || u === null) {
                    return false;
                }
                for (const prop of props) {
                    if (!objectHas(u, prop.key) || !prop.val(u[prop.key])) {
                        return false;
                    }
                }
                return true;
            };
        }
        return;
    }
    _subRepo;
}
;
export class GenericArrayValidator {
    constructor(subRepo) {
        this._subRepo = subRepo;
    }
    get(t) {
        if (t instanceof ArrayType) {
            const subVal = this._subRepo.get(t.itemType);
            if (subVal === undefined) {
                return;
            }
            return (u) => {
                if (!Array.isArray(u)) {
                    return false;
                }
                for (let i = 0; i < u.length; i++) {
                    if (!subVal(u[i])) {
                        return false;
                    }
                }
                return true;
            };
        }
        return;
    }
    _subRepo;
}
//# sourceMappingURL=data:application/json;base64,